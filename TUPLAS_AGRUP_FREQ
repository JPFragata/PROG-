# -*- coding: utf-8 -*-
"""
Created on Sun Sep  1 16:32:53 2024

@author: jpfragata
"""

# AGRUPAMENTO E FREQUÊNCIA EM TUPLAS

#--------------------------------------------------------------- P R I M E I R A  Q U E S T Ã O --------------------------------------------- 

# 1) Combinando/Invertendo tuplas
# Considere
# a) uma tupla de tuplas representando animais e 
# b) outra tupla de tuplas representando os tipos de locais onde esses animais residem. 
# Estas tuplas estão na mesma ordem e todos os animais tem local de residência
# O objetivo é combinar as duas tuplas para associar cada animal ao seu respectivo habitat.


# 1a) construa a  função combinar_animais_locais que combina as informações em uma
#  nova tupla de tuplas. Cada nova tupla contém o nome do animal, a característica 
#  e o habitat.
 
 
#  1b) construa a função exibir_animais_com_locais que exibe cada animal com sua 
#     característica e o tipo de local onde ele vive, formatado de maneira legível.
    
# Saída esperada para o exemplo:
#     Leão (Carnívoro) vive em Savana
#     Elefante (Herbívoro) vive em Floresta
#     Tubarão (Carnívoro) vive em Oceano
#     Pinguim (Carnívoro) vive em Antártida
#     Girafa (Herbívoro) vive em Savana
    
# 1c) construa uma tupla de tuplinhas onde cada tuplinha possui: 
#     (característica, lista e animais com esta característica)
#    tupla resultante:
#        (("Carnívoro",["Leão","Tubarão","Pinguim"]),
#         ("Herbívoro",["Elefante","Girafa"]))


# tupla de animais
tanimais = (
    ("Leão", "Carnívoro"),
    ("Elefante", "Herbívoro"),
    ("Tubarão", "Carnívoro"),
    ("Pinguim", "Carnívoro"),
    ("Girafa", "Herbívoro"),
)

# tupla de locais
tlocais = (
    ("Leão", "Savana"),
    ("Elefante", "Floresta"),
    ("Tubarão", "Oceano"),
    ("Pinguim", "Antártida"),
    ("Girafa", "Savana"),
)

# 1A) ------------------------------------------------------------------------

def combinar_animais_locais(tanimais,tlocais):
    tupla = []
    for (pos,(animal,carac)) in enumerate(tanimais):
        local = tlocais[pos][1]
        tupla.append((animal,carac,local))
    return tuple(tupla)
        
#NESSA QUESTÃO, EM AMBAS AS LISTAS DE TUPLAS, O ANIMAL ESTÁ NA MESMA POSIÇÃO
#ENTÃO NÃO É NECESSÁRIO USAR A FUNÇÃO AUXILIAR 'BUSCA'
#USAMOS O ENUMERATE, POIS PRECISAMOS DO ÍNDICE DA TUPLA DE CADA ANIMAL, PARA PODER
#PERCORRER A TUPLA DE LOCAIS. PARA CADA ANIMAL, O LOCAL DELE ESTÁ NA TUPLA DE MESMO
#ÍNDICE DA TUPLA DE CARACTERÍSTICAS. ENTÃO PARA CADA ÍNDICE DESSES, ACGAMO O LOCAL 
#ATRAVÉS DELE E DO ÍNDICE [1], QUE CORRESPONDE À POSIÇÃO FIXA NA TUPLA LOCAIS.

# 1B) ------------------------------------------------------------------------

def exibir_animais_com_locais(tanimais,tlocais):
    for (pos,(animal,carac)) in enumerate(tanimais):
        local = tlocais[pos][1]
        print(f'O {animal} ({carac}) vive em {local}')
        
#MESMA COISA DA QUESTÃO ANTERIOR, SÓ QUE AQUI NÓS APENAS EXIBIMOS AS INFORMAÇÕES
#FORMATADAS CONFORME SOLICITADO NO ENUNCIADO

# 1C) ------------------------------------------------------------------------

def busca(lista,valor):
    for (pos,elemento) in enumerate(lista):
        if elemento[0]==valor:
            return pos
    return None
        
def tupla_de_tuplas(tanimais,tlocais):
    lista = []
    for (animal,carac) in tanimais:         #PARA CADA ANIMAL E CARACTERISTICA NA TUPLA DE ANIMAIS
        pos=busca(lista,carac)              #A POSIÇÃO DO ANIMAL É ACHADA PELA FUNÇÃO AUXILIAR 'BUSCA'
        if pos == None:                     #SE A POSIÇÃO NÃO EXISTIR
            lista.append((carac,[]))        #ADICIONA UMA TUPLA COM A CARACTERISTICA E UMA LISTA VAZIA NA LISTA INICIAL
            pos=-1                          #REDUZ 1 DO ÍNDICE ---NÃO ENTENDI---
        lista[pos][1].append(animal)        #ADICIONA NA LISTA DENTRO DA TUPLA O ANIMAL QUE POSSUI A CARACTERÍSTICA
    return tuple(lista)                     #RETORNA A LISTA COM TUPLAS EM FORMA DE UMA TUPLA DE TUPLAS
            
#--------------------------------------------------------------- S E G U N D A  Q U E S T Ã O ---------------------------------------------   

# 2 -Considere uma tupla de eventos que ocorreram em diferentes cidades. 
# Cada evento é representado por uma tupla contendo o nome da cidade, 
# o nome do evento e o ano em que o evento ocorreu. 
# Seu objetivo é constrir uma função que agrupe os eventos por cidade, 
# de modo que cada cidade tenha uma lista de todos os eventos (evento,ano) que 
# ocorreram nela.
# tupla gerada para o exemplo
# (('São Paulo',[('Carnaval', 2022),('Fórmula 1', 2021),('Bienal do Livro', 2023),('Fórmula 1', 2022)]),
#  ('Rio de Janeiro',[('Rock in Rio', 2022), ('Carnaval', 2023), ('Festa de Ano Novo', 2022)]),
#  ('Salvador', [('Carnaval', 2023), ('Festival de Verão', 2022)]))

eventos = (("São Paulo", "Carnaval", 2022),
    ("Rio de Janeiro", "Rock in Rio", 2022),
    ("São Paulo", "Fórmula 1", 2021),
    ("Salvador", "Carnaval", 2023),
    ("São Paulo", "Bienal do Livro", 2023),
    ("Rio de Janeiro", "Carnaval", 2023),
    ("Salvador", "Festival de Verão", 2022),
    ("São Paulo", "Fórmula 1", 2022),
    ("Rio de Janeiro", "Festa de Ano Novo", 2022),
)

def constroi_lista_eventos(eventos):            #MESMA ESTRUTURA DA QUESTÃO 01
    lista = []
    for (cidade,evento,ano) in eventos:
        pos = busca(lista,cidade)               # Verifica se a cidade já está na lista agrupada
        if pos == None:
            lista.append((cidade,[]))
            pos=-1
        lista[pos][1].append((evento,ano))
    return tuple(lista) 

#--------------------------------------------------------------- T E R C E I R A  Q U E S T Ã O --------------------------------------------- 

# 3- Considere uma série de compras realizadas em uma loja online. 
# Cada compra é representada por uma tupla que contém 
# o nome do cliente, o nome do produto e a quantidade comprada.
# Construa a função frequencia_compras que receba a tupla de compras,
# crie e retorne uma lista de tuplinhas, onde cada tuplinha contém
# outra tupla com o nome do cliente e o produto, seguida pela quantidade total 
# comprada daquele produto. Portanto,cada tuplinha deve representar uma 
# combinação única de cliente e produto, juntamente com a quantidade total 
# que esse cliente comprou daquele produto.

# Lista de compras
compras = [
    ("João", "Livro", 1),
    ("Maria", "Caneta", 2),
    ("João", "Livro", 1),
    ("Maria", "Livro", 1),
    ("João", "Caderno", 3),
    ("Maria", "Livro", 2),
    ("Pedro", "Livro", 1),
    ("Pedro", "Caderno", 4),
    ("João", "Caderno", 1)]

# Saída esperada
#     (('João', 'Livro'), 2)
#     (('Maria', 'Caneta'), 2)
#     (('Maria', 'Livro'), 3)
#     (('João', 'Caderno'), 4)
#     (('Pedro', 'Livro'), 1)
#     (('Pedro', 'Caderno'), 4)
                                                    

def frequencia_compras(compras):
    lista = []  
    for (cliente, produto, quantidade) in compras:
        pos=busca(lista, (cliente,produto))
        if pos == None:
            lista.append(((cliente,produto),quantidade))
        else:
            quant=lista[pos][1]
            lista[pos] = ((cliente, produto), quant + quantidade)
    return lista
                                                                    
#ACHAR A POSIÇÃO DA TUPLA (CLIENTE,PRODUTO) NA LISTA VAZIA
#SE A POSIÇÃO FOR INEXISTENTE, OU SEJA, NÃOTIVER ESSA INFO NA LISTA        
#ADICIONAR A TUPLA (CLEINTE,PRODUTO) E A QUANTIDADE COMPRADA       
#CASO CONTRÁRIO, SE EXISTIR
#A QUANTIDADE ESTÁ LOCALIZADA NO ÍNDICE 1 DA TUPLA SELECIONADA      
#SUBSTITUIR A TUPLA ANTIGA PELA TUPLA CNOVA COM AS INFOS DE (CLIENTE, PRODUTO)     
#E A QUANTIDADE PASSA A SER A INICIAL SOMADA A NOVA QUANTIDADE DE OUTRA COMPRA DO MESMO PRODUTO        
#OBS: TEM QUE SUBSITUIR, POIS O QUE FOI 'APPENDADO' É UMA TUPLA, QUE É IMUTÁVEL. ENTÃO SÓ RESTA        
#SOBREESCREVER COM AS INFORMAÇÕES REPETIDAS, PORÉM COM A CONTAGEM ATUALIZADA       
        
